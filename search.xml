<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android意图跳转组件-Intent用法</title>
    <url>/Android%E6%84%8F%E5%9B%BE%E8%B7%B3%E8%BD%AC-Intent%E7%94%A8%E6%B3%95%E8%A7%A3%E6%9E%90.html</url>
    <content><![CDATA[<!-- build time:Sun Apr 05 2020 22:44:42 GMT+0800 (GMT+08:00) --><h2 id="Intent-的设计初衷"><a href="#Intent-的设计初衷" class="headerlink" title="Intent 的设计初衷"></a>Intent 的设计初衷</h2><p>Android 系统设计的独特之处在于，任何应用都可启动其他应用的组件。<br>由于系统在单独的进程中运行每个应用，且其文件权限会限制对其他应用的访问，因此您的应用无法直接启动其他应用中的组件，但 Android 系统可以。如要启动其他应用中的组件，请向系统传递一条消息，说明启动特定组件的 <em>Intent</em> 。系统随后便会为您启动该组件。<br>当系统启动某个组件时，它会启动该应用的进程（如果尚未运行），并实例化该组件所需的类。例如，如果您的应用启动相机应用中拍摄照片的 Activity，则该 Activity 会在属于相机应用的进程（而非您的应用进程）中运行。因此，与大多数其他系统上的应用不同，Android 应用并没有单个入口点（即没有 <code>main()</code> 函数）。</p><a id="more"></a><h2 id="Intent-介绍"><a href="#Intent-介绍" class="headerlink" title="Intent 介绍"></a>Intent 介绍</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvY29udGVudC9JbnRlbnQ=" title="https://developer.android.google.cn/reference/android/content/Intent">Intent<i class="fa fa-external-link"></i></span> 是一个消息传递对象，您可以用来从其他<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vZ3VpZGUvY29tcG9uZW50cy9mdW5kYW1lbnRhbHMjQ29tcG9uZW50cw==" title="https://developer.android.google.cn/guide/components/fundamentals#Components">应用组件<i class="fa fa-external-link"></i></span>请求操作。尽管 Intent 可以通过多种方式促进组件之间的通信，但其基本用例主要包括以下三个：启动 Activity、启动服务、传递广播。</p><ul><li><p><strong>启动 Activity</strong></p><p>Activity 表示应用中的一个屏幕。通过将Intent 传递给 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvY29udGVudC9Db250ZXh0I3N0YXJ0QWN0aXZpdHkoYW5kcm9pZC5jb250ZW50LkludGVudA==" title="https://developer.android.google.cn/reference/android/content/Context#startActivity(android.content.Intent">startActivity()<i class="fa fa-external-link"></i></span>，可以启动新的 Activity 实例。Intent 用于描述要启动的 Activity，并携带任何必要的数据。<br>如果希望在 Activity 完成后收到结果，可以调用 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL0FjdGl2aXR5I3N0YXJ0QWN0aXZpdHlGb3JSZXN1bHQoYW5kcm9pZC5jb250ZW50LkludGVudCwlMjBpbnQp" title="https://developer.android.google.cn/reference/android/app/Activity#startActivityForResult(android.content.Intent,%20int)">startActivityForResult()<i class="fa fa-external-link"></i></span>。在 Activity 的 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL0FjdGl2aXR5I29uQWN0aXZpdHlSZXN1bHQoaW50LCUyMGludCwlMjBhbmRyb2lkLmNvbnRlbnQuSW50ZW50KQ==" title="https://developer.android.google.cn/reference/android/app/Activity#onActivityResult(int,%20int,%20android.content.Intent)">onActivityResult()<i class="fa fa-external-link"></i></span> 回调中，Activity 将结果作为单独的 Intent 对象接收。</p></li><li><p><strong>启动服务</strong></p><p>Service是一个不使用用户界面而在后台执行操作的组件。通过 startService(intent) 方法启动服务执行一次性操作（例如，下载文件），通过 bindService(intent) 方法将服务绑定到组件上。</p></li><li><p><strong>传递广播</strong><br>广播是任何应用均可接收的消息。系统将针对系统事件（例如：系统启动或设备开始充电时）传递各种广播。通过 sendBroadcast(intent) 或 sendOrderedBroadcast(intent) 方法，可以将广播传递给其他应用。</p></li></ul><h3 id="Intent-分为两种类型："><a href="#Intent-分为两种类型：" class="headerlink" title="Intent 分为两种类型："></a>Intent 分为两种类型：</h3><ul><li><strong>显式 Intent</strong> ：通过提供目标应用的软件包名称或完全限定的组件类名来指定可处理 Intent 的应用。通常，您会在自己的应用中使用显式 Intent 来启动组件，这是因为您知道要启动的 Activity 或服务的类名。例如，您可能会启动您应用内的新 Activity 以响应用户操作，或者启动服务以在后台下载文件。</li><li><strong>隐式 Intent</strong> ：不会指定特定的组件，而是声明要执行的常规操作，从而允许其他应用中的组件来处理。例如，如需在地图上向用户显示位置，则可以使用隐式 Intent，请求另一具有此功能的应用在地图上显示指定的位置。</li></ul><p>图 1 显示如何在启动 Activity 时使用 Intent。当 <code>Intent</code> 对象显式命名某个具体的 Activity 组件时，系统立即启动该组件。</p><p><img data-src="https://developer.android.google.cn/images/components/intent-filters_2x.png" alt="图 1 隐式 Intent 如何通过系统传递以启动其他 Activity"></p><p>使用隐式 Intent 时，Android 系统通过将 Intent 的内容与在设备上其他应用的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vZ3VpZGUvdG9waWNzL21hbmlmZXN0L21hbmlmZXN0LWludHJv" title="https://developer.android.google.cn/guide/topics/manifest/manifest-intro">清单文件<i class="fa fa-external-link"></i></span>中声明的 <em>Intent 过滤器 (intent-filter)</em> 进行比较，从而找到要启动的相应组件。如果 Intent 与 Intent 过滤器匹配，则系统将启动该组件，并向其传递 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvY29udGVudC9JbnRlbnQ=" title="https://developer.android.google.cn/reference/android/content/Intent">Intent<i class="fa fa-external-link"></i></span> 对象。如果匹配到多个 Intent 过滤器，则系统会显示一个对话框，支持用户选取要使用的应用。</p><p><strong>注意：</strong> 为了确保应用的安全性，启动 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL1NlcnZpY2U=" title="https://developer.android.google.cn/reference/android/app/Service">Service<i class="fa fa-external-link"></i></span> 时，请始终使用显式 Intent，且不要为服务声明 Intent 过滤器。使用隐式 Intent 启动服务存在安全隐患，因为您无法确定哪些服务将响应 Intent，且用户无法看到哪些服务已启动。从 Android 5.0（API 级别 21）开始，如果使用隐式 Intent 调用 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvY29udGVudC9Db250ZXh0I2JpbmRTZXJ2aWNlKGFuZHJvaWQuY29udGVudC5JbnRlbnQsJTIwYW5kcm9pZC5jb250ZW50LlNlcnZpY2VDb25uZWN0aW9uLCUyMGludCk=" title="https://developer.android.google.cn/reference/android/content/Context#bindService(android.content.Intent,%20android.content.ServiceConnection,%20int)">bindService()<i class="fa fa-external-link"></i></span> ，系统会抛出异常。</p><h2 id="构建-Intent"><a href="#构建-Intent" class="headerlink" title="构建 Intent"></a>构建 Intent</h2><h3 id="显式-Intent"><a href="#显式-Intent" class="headerlink" title="显式 Intent"></a>显式 Intent</h3><p>显式 Intent 通过指定组件启动，可以使用 setComponent()、setClass()、setClassName()，或 Intent 构造函数设置 ComponentName 对象。<br><code>当设置了 ComponentName 对象后，系统就不会取匹配 intent-filter ，而是直接跳转 ComponentName 中指定的 Activity 。</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将直接跳转到ThirdActivity，不会去匹配Action</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent.setComponent(<span class="keyword">new</span> ComponentName(<span class="string">"com.example.myaop"</span>, <span class="string">"com.example.myaop.ThirdActivity"</span>));</span><br><span class="line">intent.setAction(<span class="string">"com.example.myaop.priority"</span>);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><h3 id="隐式-Intent"><a href="#隐式-Intent" class="headerlink" title="隐式 Intent"></a>隐式 Intent</h3><p>隐式 Intent 匹配的顺序是 action &gt; data &gt; category。除 BroadcastReceiver 可以动态注册，在代码里设置 intent-filter 以外，Activity、Service 都必须在 Android Manifest 中声明 intent-filter 。 如果不希望自己的组件被其他应用匹配到，可以将 exported 设为 false。<br><code>注意：intent-filter 可以设置优先级，但这里的优先级是进程的优先级，并不会影响匹配的过程。</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line">  android:exported="false" &lt;!-- 不被外部应用启动 --&gt;</span><br><span class="line">  android:name=".SecondActivity"</span><br><span class="line">  android:label="@string/app_name"</span><br><span class="line">  android:theme="@style/AppTheme.NoActionBar"&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"1000"</span>&gt;</span> <span class="comment">&lt;!-- 设置进程的优先级1000,并不会影响匹配 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.myaop.priority"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>action<br>可以约定自定义的 Action，让其他应用启动。比如添加支付宝约定的 Action， 跳转支付宝支付后接收对应的支付广播获取支付结果。</li></ol><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvY29udGVudC9JbnRlbnQjY29uc3RhbnRzXzI=" title="https://developer.android.google.cn/reference/android/content/Intent#constants_2">Android 常用的 Action<i class="fa fa-external-link"></i></span></p><table><thead><tr><th>Action 名称</th><th>作用</th></tr></thead><tbody><tr><td>android.intent.action.MAIN</td><td>首页，点击应用图标启动的第一个 Activity</td></tr><tr><td>android.intent.action.VIEW</td><td>查看，一般需要要同时设置 data ，启动相应的系统应用查看</td></tr><tr><td>android.intent.action.EDIT</td><td>编辑</td></tr><tr><td>android.intent.action.INSERT_OR_EDIT</td><td>插入，存在则修改</td></tr><tr><td>android.intent.action.PICK</td><td>选中</td></tr></tbody></table><ol start="2"><li>data<br>每个 <a href="https://developer.android.google.cn/guide/topics/manifest/data-element" target="_blank" rel="noopener"><data></data></a>元素均可指定 URI 结构和数据类型（MIME 媒体类型）。URI 的每个部分都是一个单独的属性：<code>scheme</code>、<code>host</code>、<code>port</code> 和 <code>path</code>：<code>&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;/&lt;path&gt;</code><br>下例所示为这些属性的可能值：<code>content://com.example.project:200/folder/subfolder/etc</code><br>在此 URI 中，架构是 <code>content</code>，主机是 <code>com.example.project</code>，端口是 <code>200</code>，路径是 <code>folder/subfolder/etc</code>。</li></ol><p>一般来说，指定 URI，系统会自动推断 mimeType。如果要同时指定 URI 和 mimeType，可以使用 <code>public @NonNull Intent setDataAndType(@Nullable Uri data, @Nullable String type)</code>方法。</p><p>intent 中的 URI 和 intent-filter 中的<data>比较时，按 scheme、host、port、path 的顺序比较，如果没找到就不会继续往下比较，默认比较成功。<code>例如：只设置了host没有设置scheme，比较scheme时发现没有scheme则认为匹配成功而不会继续往下去比较host。</code></data></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件可从内容提供程序处获得并显示图像数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">data</span>  <span class="attr">android:mimeType</span>=<span class="string">"image/*"</span>  /&gt;</span> </span><br><span class="line">  ... </span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件可从网络中检索视频或图片数据以执行操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">data</span>  <span class="attr">android:scheme</span>=<span class="string">"http"</span>  <span class="attr">android:mimeType</span>=<span class="string">"video/*"</span>  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">data</span>  <span class="attr">android:mimeType</span>=<span class="string">"image/*"</span>  <span class="attr">android:scheme</span>=<span class="string">"http"</span> <span class="attr">...</span> /&gt;</span></span><br><span class="line">  ... </span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>category<br>intent 默认会设置 CATEGORY_DEFAULT，所以所有希望响应隐式 Intent 的组件都需要在 intent-filter 设置 CATEGORY_DEFAULT。</li></ol><table><thead><tr><th>Action 名称</th><th>作用</th><th></th></tr></thead><tbody><tr><td>CATEGORY_DEFAULT</td><td>Android系统中默认的执行方式，按照普通Activity的执行方式执行</td><td></td></tr><tr><td>CATEGORY_HOME</td><td>设置该组件为Home Activity</td><td></td></tr><tr><td>CATEGORY_PREFERENCE</td><td>设置该组件为Preference</td><td></td></tr><tr><td>CATEGORY_LAUNCHER</td><td>设置该组件为在当前应用程序启动器中优先级最高的Activity，通常为入口ACTION_MAIN配合使用</td><td></td></tr><tr><td>CATEGORY_BROWSABLE</td><td>设置该组件可以使用浏览器启动</td><td></td></tr><tr><td>CATEGORY_GADGET</td><td>设置该组件可以内嵌到另外的Activity中</td><td></td></tr></tbody></table><h3 id="常见-Intent"><a href="#常见-Intent" class="headerlink" title="常见 Intent"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vZ3VpZGUvY29tcG9uZW50cy9pbnRlbnRzLWNvbW1vbg==" title="https://developer.android.google.cn/guide/components/intents-common">常见 Intent<i class="fa fa-external-link"></i></span></h3><table><thead><tr><th>Action</th><th>应用类型</th><th>URI</th><th>mimeType</th></tr></thead><tbody><tr><td>ACTION_SET_ALARM</td><td>闹钟</td><td></td><td></td></tr><tr><td>ACTION_IMAGE_CAPTURE</td><td>拍摄照片并返回</td><td></td><td></td></tr><tr><td>ACTION_VIDEO_CAPTURE</td><td>拍摄视频并返回</td><td></td><td></td></tr><tr><td>INTENT_ACTION_IMAGE_CAMERA</td><td>启动相机拍照</td><td></td><td></td></tr><tr><td>INTENT_ACTION_VIDEO_CAMERA</td><td>启动相机拍摄视频</td><td></td><td></td></tr><tr><td>ACTION_VIEW</td><td>查看联系人</td><td>http:<del>uri</del><br>https:<del>uri</del></td><td>text/html<br>application/xhtml+xml</td></tr><tr><td>ACTION_VIEW</td><td>使用浏览器打开网页</td><td>content:<del>uri</del></td><td></td></tr><tr><td>ACTION_VIEW</td><td>播放音乐</td><td>file:<del>uri</del><br>content:<del>uri</del><br>http:<del>uri</del><br></td><td>audio/_<br>application/_</td></tr><tr><td>ACTION_DIAL</td><td>打开拨号器</td><td>tel:<del>phone-number</del><br>voicemail:<del>phone-number</del><br></td><td></td></tr></tbody></table><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>轻松入门</tag>
        <tag>Intent</tag>
      </tags>
  </entry>
  <entry>
    <title>Android四大组件——Activity解析</title>
    <url>/Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94Activity%E8%A7%A3%E6%9E%90.html</url>
    <content><![CDATA[<!-- build time:Sun Apr 05 2020 22:44:42 GMT+0800 (GMT+08:00) --><blockquote><p>本文将详细讲解 Activity 的生命周期、启动流程，并对源码进行一些分析。</p></blockquote><a id="more"></a><hr><h2 id="Activity-生命周期"><a href="#Activity-生命周期" class="headerlink" title="Activity 生命周期"></a>Activity 生命周期</h2><p><img data-src="Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94Activity%E8%A7%A3%E6%9E%90/activity_lifecycle.jpg" alt="Activity 生命周期"></p><h3 id="Activity-状态和从内存中弹出"><a href="#Activity-状态和从内存中弹出" class="headerlink" title="Activity 状态和从内存中弹出"></a>Activity 状态和从内存中弹出</h3><p>系统会在需要释放内存时终止进程；系统终止给定进程的可能性取决于当时进程的状态。反之，进程状态则取决于在进程中运行的 Activity 的状态。进程状态、Activity 状态，以及系统终止进程的可能性的相互关系如表所示。</p><table><thead><tr><th>系统终止进程的可能性</th><th>进程状态</th><th align="right">Activity 状态</th></tr></thead><tbody><tr><td>小</td><td>前台（拥有或即将获得焦点）</td><td align="right">OnCreate( )<br>OnStart( )<br>OnResume( )</td></tr><tr><td>中</td><td>后台（失去焦点）</td><td align="right">OnPasue( )</td></tr><tr><td>大</td><td>后台（不可见）</td><td align="right">OnStop( )</td></tr><tr><td></td><td>空</td><td align="right">OnDestroy( )</td></tr></tbody></table><p>系统永远不会直接终止 Activity 以释放内存，而是会终止 Activity 所在的进程。系统不仅会销毁 Activity，还会销毁在该进程中运行的所有其他内容。</p><h3 id="Activity基本上存在于三种状态，其他状态都会很快结束"><a href="#Activity基本上存在于三种状态，其他状态都会很快结束" class="headerlink" title="Activity基本上存在于三种状态，其他状态都会很快结束"></a>Activity基本上存在于三种状态，其他状态都会很快结束</h3><ol><li><p>恢复 onResume()<br>Activity位于屏幕的前景并具有用户焦点可以交互。</p></li><li><p>已暂停 onPause()<br>Activity在后台并失去焦点，但用户仍然可以看见该 Activity。有两种情况：</p></li></ol><ul><li>另一个Activity在这个Activity的顶部可见，该Activity部分透明或不覆盖整个屏幕；</li><li>或者处于多窗口模式，该 Activity 没有焦点。</li></ul><p><code>例1：玩游戏时弹出活动弹窗，这个弹窗的Activity处于OnResume()状态。如果这个时候能看到下方的游戏界面，此时游戏Activity处于OnPasue()状态；如果是个全屏弹窗，看不到游戏界面，此时游戏Activity处于OnStop()状态。</code><br><code>例2：打开分屏模式，一边是微信，一边是游戏，两边的Activity均可见。此时用户点击了哪边，哪边就得到焦点，处于OnResume()状态，而另外一边则处于OnPasue()状态。</code></p><p>暂停的 Activity 完全处于活动状态（Activity 对象保留在内存中，它保留所有状态和成员信息，并保持附加到窗口管理器），但可以在极低内存情况下被系统杀死。</p><ol start="3"><li>停止 onStop()<br>该Activity完全被另一个Activity遮挡，不可见。停止的Activity也仍然存在（Activity 对象保留在内存中，它维护所有状态和成员信息，但不 附加到窗口管理器）。但是，它不再对用户可见，并且当其他地方需要内存时，它可能被系统杀死。<br>如果Activity暂停或停止，系统可以通过要求它完成（调用其finish()方法）或简单地终止其进程来从内存中删除它。当活动再次打开时（在完成或杀死之后），必须全部创建它。</li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC80NzYwODdiNGMwODc=" title="https://www.jianshu.com/p/476087b4c087">Android之Activity全面解析<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vZ3VpZGUvY29tcG9uZW50cy9hY3Rpdml0aWVzL2FjdGl2aXR5LWxpZmVjeWNsZQ==" title="https://developer.android.google.cn/guide/components/activities/activity-lifecycle">Google 文档<i class="fa fa-external-link"></i></span></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Activity生命周期</tag>
        <tag>Activity启动流程</tag>
        <tag>源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Android应用基础知识</title>
    <url>/Android%E5%BA%94%E7%94%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html</url>
    <content><![CDATA[<!-- build time:Sun Apr 05 2020 22:44:42 GMT+0800 (GMT+08:00) --><blockquote><p>众所周知，Android 的内核是 Linux 系统，Linux 为了方便管理硬件，将硬件看作是一个个文件，而 Android 为了将每个应用隔离开来，更是将应用看作是一个个用户，每个用户都有着自己独立的进程、权限，下面来看一下为了给自己的应用获取更多的权限有哪些玩法吧。</p></blockquote><a id="more"></a><hr><h2 id="Google-官方文档"><a href="#Google-官方文档" class="headerlink" title="Google 官方文档"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vZ3VpZGUvY29tcG9uZW50cy9mdW5kYW1lbnRhbHM=" title="https://developer.android.google.cn/guide/components/fundamentals">Google 官方文档<i class="fa fa-external-link"></i></span></h2><p>每个 Android 应用都处于各自的安全沙盒中，并受以下 Android 安全功能的保护：</p><ul><li>Android 操作系统是一种多用户 Linux 系统，其中的每个应用都是一个不同的用户；</li><li>默认情况下，系统会为每个应用分配一个唯一的 Linux 用户 ID（该 ID 仅由系统使用，应用并不知晓）。系统会为应用中的所有文件设置权限，使得只有分配给该应用的用户 ID 才能访问这些文件；</li><li>每个进程都拥有自己的虚拟机 (VM)，因此应用代码独立于其他应用而运行。</li><li>默认情况下，每个应用都在其自己的 Linux 进程内运行。Android 系统会在需要执行任何应用组件时启动该进程，然后当不再需要该进程或系统必须为其他应用恢复内存时，其便会关闭该进程。</li></ul><p>Android 系统实现了 <em>最小权限原则</em> 。换言之，默认情况下，每个应用只能访问执行其工作所需的组件，而不能访问其他组件。这样便能创建非常安全的环境，在此环境中，应用无法访问其未获得权限的系统部分。不过，应用仍可通过一些途径与其他应用共享数据以及访问系统服务：</p><ul><li>==可以安排两个应用共享同一 Linux 用户 ID，在此情况下，二者便能访问彼此的文件。为节省系统资源，也可安排拥有相同用户 ID 的应用在同一 Linux 进程中运行，并共享同一 VM。应用还必须使用相同的证书进行签名。==</li><li>应用可以请求访问设备数据（如用户的联系人、短信消息、可装载存储装置（SD 卡）、相机、蓝牙等）的权限。用户必须明确授予这些权限。如需了解详细信息，请参阅<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vdHJhaW5pbmcvcGVybWlzc2lvbnM=" title="https://developer.android.google.cn/training/permissions">使用系统权限<i class="fa fa-external-link"></i></span>。</li></ul><h2 id="如何获取更多权限"><a href="#如何获取更多权限" class="headerlink" title="如何获取更多权限"></a>如何获取更多权限</h2><p>大家在买手机的时候都会发现有一些系统应用，像软件商店、日历等等，这些应用有着更多的权限且不可卸载。这是因为手机厂商给这些应用单独开了一个 system 分区，在这个分区的应用都属于 system 用户组，被赋予了 system 权限。</p><ol><li>通过共享系统应用的用户 ID，两个应用在同一进程中运行，自然也拥有了相同的权限，但是两个应用必须使用相同的签名。<br>具体做法是修改AndroidManifest.xml文件，添加共享系统进程属性：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android:sharedUserId&#x3D;&quot;android.uid.system&quot;</span><br><span class="line">android:sharedUserId&#x3D;&quot;android.uid.shared&quot;</span><br><span class="line">android:sharedUserId&#x3D;&quot;android.media&quot;</span><br></pre></td></tr></table></figure>再使用系统签名，否则不能成功安装。<br>如果是自己的系统，可以直接在 system 分区安装一个僵尸应用，然后想将哪个应用变得不可卸载，就直接给哪个应用添加共享进程属性，使用相同的签名，就可以达到系统预装的效果了。</li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Linux</tag>
        <tag>system权限</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题的注入</title>
    <url>/next%E4%B8%BB%E9%A2%98%E7%9A%84%E6%B3%A8%E5%85%A5.html</url>
    <content><![CDATA[<!-- build time:Sun Apr 05 2020 22:44:42 GMT+0800 (GMT+08:00) --><blockquote><p>基于 hexo-injects 插件的 Next 主题的<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0Lm9yZy9kb2NzL2FkdmFuY2VkLXNldHRpbmdz" title="https://theme-next.org/docs/advanced-settings">Injects<i class="fa fa-external-link"></i></span>对扩展开放，对修改关闭，很好地符合了“开-闭原则”，下面介绍一下 Injects 的使用方法。</p></blockquote><a id="more"></a><hr><h2 id="Next-注入"><a href="#Next-注入" class="headerlink" title="Next 注入"></a>Next 注入</h2><p>在主题配置文件_config.yml 中可以找到下面这段配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment"># head: source/_data/head.swig                      #html中的head</span></span><br><span class="line">  <span class="comment"># header: source/_data/header.swig                  #文章的头部</span></span><br><span class="line">  <span class="comment"># sidebar: source/_data/sidebar.swig                #滑动块</span></span><br><span class="line">  <span class="comment"># postMeta: source/_data/post-meta.swig             #文章设置：创建日期、更新日期...</span></span><br><span class="line">  <span class="comment"># postBodyEnd: source/_data/post-body-end.swig      #文章结束</span></span><br><span class="line">  <span class="comment"># footer: source/_data/footer.swig                  #文章底部</span></span><br><span class="line">  <span class="comment"># bodyEnd: source/_data/body-end.swig               #html的body</span></span><br><span class="line">  <span class="comment"># variable: source/_data/variables.styl             #主题现存样式</span></span><br><span class="line">  <span class="comment"># mixin: source/_data/mixins.styl                   #设备适配</span></span><br><span class="line">  <span class="comment"># style: source/_data/styles.styl                   #所有样式</span></span><br></pre></td></tr></table></figure><p>在站点目录下的 source 文件夹下创建相应的文件，再把上述注释去掉，即可使用</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><em>source/_data/styles.styl</em> :</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">	border-radius: 20px; //文章背景设置圆角</span><br><span class="line">	<span class="selector-tag">padding</span>: 30<span class="selector-tag">px</span> 60<span class="selector-tag">px</span> 30<span class="selector-tag">px</span> 60<span class="selector-tag">px</span>;</span><br><span class="line">	<span class="selector-tag">background</span><span class="selector-pseudo">:rgba(255</span>, 255, 255, 0<span class="selector-class">.8</span>) <span class="selector-tag">none</span> <span class="selector-tag">repeat</span> <span class="selector-tag">scroll</span> !<span class="selector-tag">important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-inner</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//背景图</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">url</span>(/images/background_black.jpg);</span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">url</span>(/images/background_black.jpg);</span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer-inner</span>&#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center</span><br><span class="line">&#125;</span><br><span class="line">// 文章摘要配图</span><br><span class="line">// 图片外部的容器方框，限制图片大小</span><br><span class="line"><span class="selector-class">.out-img-topic</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line">// 图片</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-class">.img-topic</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>: right;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">margin-left</span>: .<span class="number">7em</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: .<span class="number">7em</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 文章内链接文本样式</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line"></span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: <span class="selector-tag">none</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fc6423</span>;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">-moz-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, .<span class="number">5</span>);</span><br><span class="line">  <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 自定义回到顶部样式</span><br><span class="line"><span class="selector-class">.back-to-top</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'/images/back2top.png'</span>);</span><br><span class="line">  <span class="attribute">bottom</span>: unset;</span><br><span class="line">  height: 900px; // 图片素材高度</span><br><span class="line">  <span class="selector-tag">right</span>: 60<span class="selector-tag">px</span>;</span><br><span class="line">  <span class="selector-tag">top</span>: <span class="selector-tag">-900px</span>;</span><br><span class="line">  <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.5s</span> <span class="selector-tag">ease-in-out</span>;</span><br><span class="line">  width: 70px; // 图片素材宽度</span><br><span class="line"></span><br><span class="line">  // 隐藏箭头图标</span><br><span class="line">  &gt; <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-class">.back-to-top-on</span> &#123;</span><br><span class="line">    <span class="attribute">bottom</span>: unset;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100vh</span> &lt; (<span class="number">900px</span> + <span class="number">200px</span>) ? <span class="built_in">calc</span>(<span class="number">100vh</span> - <span class="number">900px</span> - <span class="number">200px</span>) : <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入的优先级高于 <em>theme/next/source/css/_custom/custom.styl</em> ，如果 custom.styl 和 syle.styl 同时重写了 .body，最后呈现的是 syle.styl 的样式。即 CSS 渲染的顺序是 ++style.styl &gt; custom.styl &gt; base.styl++ 。</p><h2 id="自定义注入"><a href="#自定义注入" class="headerlink" title="自定义注入"></a>自定义注入</h2><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC82MWRkNDA0NThkOTM=" title="https://www.jianshu.com/p/61dd40458d93">Hexo NexT 高阶教程之 Injects<i class="fa fa-external-link"></i></span></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Hexo</tag>
        <tag>Next主题</tag>
      </tags>
  </entry>
  <entry>
    <title>打造你的专属博客</title>
    <url>/%E6%89%93%E9%80%A0%E4%BD%A0%E7%9A%84%E4%B8%93%E5%B1%9E%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94Hexo%E4%B8%BB%E9%A2%98%E8%A7%A3%E6%9E%90.html</url>
    <content><![CDATA[<!-- build time:Sun Apr 05 2020 22:44:42 GMT+0800 (GMT+08:00) --><blockquote><p>打造与众不同的个性化博客，还没有自己博客的<a href="https://zhuanlan.zhihu.com/p/44213627" target="_blank" rel="noopener"><em>请点击这里。</em></a><br><strong>知识储备：</strong> 熟悉 html、css 、js</p></blockquote><ol><li>方案一：直接修改源代码的布局、样式</li><li>方案二：使用<a href="next主题的注入">next主题的注入</a><a id="more"></a></li></ol><hr><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>下面以<a href="https://theme-next.org/" target="_blank" rel="noopener"><em>Next7.7 主题</em></a>为例：</p><h3 id="主题结构"><a href="#主题结构" class="headerlink" title="主题结构"></a>主题结构</h3><p>首先来看一下 next 的文件结构：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├─.github</span><br><span class="line">│  └─ISSUE_TEMPLATE</span><br><span class="line">├─docs &#x2F;&#x2F;说明文档</span><br><span class="line">│  ├─ru</span><br><span class="line">│  └─zh-CN</span><br><span class="line">├─languages &#x2F;&#x2F;多语言</span><br><span class="line">├─layout &#x2F;&#x2F;布局</span><br><span class="line">│  ├─_macro &#x2F;&#x2F;小部件</span><br><span class="line">│  ├─_partials &#x2F;&#x2F;组成html的每一部分</span><br><span class="line">│  │  ├─head</span><br><span class="line">│  │  ├─header</span><br><span class="line">│  │  ├─page</span><br><span class="line">│  │  ├─post</span><br><span class="line">│  │  ├─search</span><br><span class="line">│  │  └─sidebar</span><br><span class="line">│  ├─_scripts &#x2F;&#x2F;集成的第三方插件布局</span><br><span class="line">│  │  ├─pages</span><br><span class="line">│  │  └─schemes</span><br><span class="line">│  └─_third-party &#x2F;&#x2F;第三方插件</span><br><span class="line">│      ├─analytics</span><br><span class="line">│      ├─chat</span><br><span class="line">│      ├─comments</span><br><span class="line">│      ├─math</span><br><span class="line">│      ├─search</span><br><span class="line">│      ├─statistics</span><br><span class="line">│      └─tags</span><br><span class="line">├─scripts &#x2F;&#x2F;脚本</span><br><span class="line">│  ├─events</span><br><span class="line">│  │  └─lib</span><br><span class="line">│  ├─filters &#x2F;&#x2F;注入</span><br><span class="line">│  │  └─comment</span><br><span class="line">│  ├─helpers</span><br><span class="line">│  └─tags</span><br><span class="line">└─source &#x2F;&#x2F;源码</span><br><span class="line">    ├─css</span><br><span class="line">    │  ├─_common</span><br><span class="line">    │  │  ├─components</span><br><span class="line">    │  │  │  ├─pages</span><br><span class="line">    │  │  │  ├─post</span><br><span class="line">    │  │  │  └─third-party</span><br><span class="line">    │  │  ├─outline</span><br><span class="line">    │  │  │  ├─footer</span><br><span class="line">    │  │  │  ├─header</span><br><span class="line">    │  │  │  └─sidebar</span><br><span class="line">    │  │  └─scaffolding</span><br><span class="line">    │  │      ├─highlight</span><br><span class="line">    │  │      └─tags</span><br><span class="line">    │  ├─_custom</span><br><span class="line">    │  ├─_schemes</span><br><span class="line">    │  │  ├─Gemini</span><br><span class="line">    │  │  ├─Mist</span><br><span class="line">    │  │  ├─Muse</span><br><span class="line">    │  │  └─Pisces</span><br><span class="line">    │  └─_variables</span><br><span class="line">    ├─images</span><br><span class="line">    │  └─abstract</span><br><span class="line">    ├─js</span><br><span class="line">    │  └─schemes</span><br><span class="line">    └─lib</span><br><span class="line">        ├─font-awesome</span><br><span class="line">        │  ├─css</span><br><span class="line">        │  └─fonts</span><br><span class="line">        └─velocity</span><br></pre></td></tr></table></figure><h4 id="首页布局"><a href="#首页布局" class="headerlink" title="首页布局"></a>首页布局</h4><p>我们只需要关注 layout、source 这两个文件夹，先看 layout 下的 index.swig</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends  '_layout.swig' %&#125; <span class="comment">&lt;!-- _layout.swig首页的基础布局 --&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% import  '_macro/sidebar.swig'  as  sidebar_template  with  context %&#125; <span class="comment">&lt;!-- sidebar.swig滑动块的布局 --&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% block  title %&#125;&#123;&#123; title &#125;&#125;&#123;%- if  theme.index_with_subtitle  and  subtitle %&#125; - &#123;&#123; subtitle &#125;&#125;&#123;%- endif %&#125;&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">man</span><br><span class="line"></span><br><span class="line">&#123;% block  content %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">class</span>=<span class="string">"posts-expand"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;%- for  post  in  page.posts.toArray() %&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; partial('_macro/post.swig', &#123;post: post, is_index: true&#125;) &#125;&#125;  <span class="comment">&lt;!-- post.swig文章布局 --&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;%- endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% include  '_partials/pagination.swig' %&#125; <span class="comment">&lt;!-- pagination.swig上一篇、下一篇文章的布局 --&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block  sidebar %&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; sidebar_template.render(false) &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="查找相应布局或-CSS"><a href="#查找相应布局或-CSS" class="headerlink" title="查找相应布局或 CSS"></a>查找相应布局或 CSS</h3><p>想要增加或删除哪一部分的布局，可直接打开对应的 swig 文件 进行修改即可。<br>如果只是想美化某一部分的样式，先在浏览器上找到该布局对应的 css 类，若使用谷歌浏览器可直接右键检查，<br><img data-src="%E6%89%93%E9%80%A0%E4%BD%A0%E7%9A%84%E4%B8%93%E5%B1%9E%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94Hexo%E4%B8%BB%E9%A2%98%E8%A7%A3%E6%9E%90/chrome_check.png" alt="右键检查"><br>或者按 F12 进入开发者模式选择元素<br><img data-src="%E6%89%93%E9%80%A0%E4%BD%A0%E7%9A%84%E4%B8%93%E5%B1%9E%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94Hexo%E4%B8%BB%E9%A2%98%E8%A7%A3%E6%9E%90/select.png" alt="选择元素并查看 class"><br>然后打开 <em>source/css/_variables/base.styl</em> 文件，或者在 source/css 目录下新增/_custom/custom.styl 文件，对找到的属性进行 x。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>例如：在每篇文章结束的时候加上一句话。</p><h4 id="引入布局"><a href="#引入布局" class="headerlink" title="引入布局"></a>引入布局</h4><p>打开 _layout/_macro/post.swig_，发现文章结束时有个 END POST BODY 的标记，在该标记前加上</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;%- if theme.passage_end_tag.enable %&#125; <span class="comment">&lt;!-- 设置开关 --&gt;</span></span><br><span class="line">      &#123;% include 'passage-end-tag.swig' %&#125;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编写布局"><a href="#编写布局" class="headerlink" title="编写布局"></a>编写布局</h4><p>新建上面代码引入的布局文件 即_layout/_macro/passage-end-tag.swig_，加入下面代码</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>  <span class="attr">style</span>=<span class="string">"text-align:center;color: #555;font-size:14px;"</span>&gt;</span></span><br><span class="line">    -------------本文结束<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-paw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>感谢您的阅读-------------</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="打开开关"><a href="#打开开关" class="headerlink" title="打开开关"></a>打开开关</h4><p>在主题配置文件即 <em>next/_config.yml</em> 里添加</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">passage_end_tag:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h4><p><img data-src="%E6%89%93%E9%80%A0%E4%BD%A0%E7%9A%84%E4%B8%93%E5%B1%9E%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94Hexo%E4%B8%BB%E9%A2%98%E8%A7%A3%E6%9E%90/effect.png" alt="效果"></p><hr><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>++对于上面所述的方案，在 next 主题上还有一种更优雅的方式——==<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0Lm9yZy9kb2NzL2FkdmFuY2VkLXNldHRpbmdz" title="https://theme-next.org/docs/advanced-settings">注入（Injects)<i class="fa fa-external-link"></i></span>==++，详情可参考我的这篇文章<a href="next主题的注入">next主题的注入</a>。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Hexo</tag>
        <tag>Next主题</tag>
        <tag>主题美化</tag>
      </tags>
  </entry>
  <entry>
    <title>Android四大组件入门</title>
    <url>/Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E5%85%A5%E9%97%A8.html</url>
    <content><![CDATA[<!-- build time:Sun Apr 05 2020 22:44:42 GMT+0800 (GMT+08:00) --><ol><li><code>Activity</code> —— <em>与用户交互的入口点</em> ，它表示拥有界面的单个屏幕。</li><li><code>Service</code> —— <em>通用入口点</em> ，在后台运行的组件，用于执行长时间运行的操作或为远程进程执行作业服务不提供界面。</li><li><code>BroadcastReceiver</code> —— <em>应用的入口点</em> ，因此系统可以向当前未运行的应用传递广播。系统能够在常规用户流之外向应用 ++传递事件++ ，从而允许应用响应系统范围内的广播通知。</li><li><code>ContentProvider</code> —— <em>应用的入口点</em> ，管理一组共享的应用数据。<a id="more"></a></li></ol><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>轻松入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world.html</url>
    <content><![CDATA[<!-- build time:Sun Apr 05 2020 22:44:42 GMT+0800 (GMT+08:00) --><p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==" title="https://hexo.io/">Hexo<i class="fa fa-external-link"></i></span>! This is your very first post. Check <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv" title="https://hexo.io/docs/">documentation<i class="fa fa-external-link"></i></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=" title="https://hexo.io/docs/troubleshooting.html">troubleshooting<i class="fa fa-external-link"></i></span> or you can ask me on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==" title="https://github.com/hexojs/hexo/issues">GitHub<i class="fa fa-external-link"></i></span>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s" title="https://hexo.io/docs/writing.html">Writing<i class="fa fa-external-link"></i></span></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=" title="https://hexo.io/docs/server.html">Server<i class="fa fa-external-link"></i></span></p><a id="more"></a><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s" title="https://hexo.io/docs/generating.html">Generating<i class="fa fa-external-link"></i></span></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s" title="https://hexo.io/docs/one-command-deployment.html">Deployment<i class="fa fa-external-link"></i></span></p><!-- rebuild by neat -->]]></content>
  </entry>
</search>
